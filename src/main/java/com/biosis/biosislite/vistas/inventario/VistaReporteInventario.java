/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biosis.biosislite.vistas.inventario;

import com.biosis.biosislite.Main;
import com.biosis.biosislite.controladores.inventario.BienInventarioControlador;
import com.biosis.biosislite.controladores.inventario.MovimientoControlador;
import com.biosis.biosislite.entidades.escalafon.Departamento;
import com.biosis.biosislite.entidades.escalafon.Empleado;
import com.biosis.biosislite.entidades.inventario.Bien_Inventario;
import com.biosis.biosislite.entidades.inventario.Inventario;
import com.biosis.biosislite.entidades.inventario.InventarioAmbiente;
import com.biosis.biosislite.entidades.inventario.Movimiento;
import com.biosis.biosislite.utiles.ButtonTabComponent;
import com.biosis.biosislite.utiles.Exportador;
import com.biosis.biosislite.utiles.ExportadorTXT;
import com.biosis.biosislite.utiles.HerramientaGeneral;
import com.biosis.biosislite.utiles.UsuarioActivo;
import com.biosis.biosislite.vistas.dialogos.inventario.DlgAmbienteBusqueda;
import com.biosis.biosislite.vistas.dialogos.inventario.DlgInventarioSeleccion;
import com.biosis.biosislite.vistas.modelos.MTReporteInventario;
import com.biosis.biosislite.vistas.modelos.MTStock;
import com.biosis.biosislite.vistas.modelos.MTTraza;
import com.biosis.biosislite.vistas.modelos.MTimpresion;
import com.biosis.biosislite.vistas.reportes.DlgAsistenciaOpcion;
import com.personal.utiles.ReporteUtil;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author Documentos
 */
public class VistaReporteInventario extends javax.swing.JInternalFrame {

    /**
     * Creates new form VistaVerMovimientos
     */
    private MovimientoControlador dmc;
    private Empleado empleado;
    private List<Bien_Inventario> lista;
    private BienInventarioControlador bic = new BienInventarioControlador();
    private Inventario inventario;

    private InventarioAmbiente ambiente;
    private final ReporteUtil reporteador;
    private final File archivo = new File("reportes/reporte_inventario_Rosario.jasper");

    public VistaReporteInventario() {
        this.dmc = new MovimientoControlador();
        initComponents();
        listar();
        reporteador = new ReporteUtil();

        FormularioUtil.activarComponente(pnlFiltro, false);
//        activarControles();

    }

    private static VistaReporteInventario instancia;

    public static VistaReporteInventario getInstancia() {
        if (instancia == null) {
            instancia = new VistaReporteInventario();
        }
        return instancia;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pnlTab = new javax.swing.JTabbedPane();
        tabDetallado = new javax.swing.JPanel();
        pnlOpciones = new javax.swing.JPanel();
        btnImprimir1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbFormatos = new javax.swing.JComboBox();
        btnExportar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblReporte = new org.jdesktop.swingx.JXTable();
        jPanel2 = new javax.swing.JPanel();
        btnInventarioDelete = new javax.swing.JButton();
        btnInventarioAdd = new javax.swing.JButton();
        txtInventario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pnlFiltro = new javax.swing.JPanel();
        spnTodo = new javax.swing.JRadioButton();
        btnAmbiente = new javax.swing.JRadioButton();
        btnAmbienteAdd = new javax.swing.JButton();
        btnAmbienteDelete = new javax.swing.JButton();
        ambienteField = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();

        buttonGroup1.add(spnTodo);
        buttonGroup1.add(btnAmbiente);

        setClosable(true);
        setTitle("Reporte de inventarios");
        setMaximumSize(new java.awt.Dimension(0, 0));
        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(new java.awt.Dimension(500, 500));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0};
        layout.rowHeights = new int[] {0};
        getContentPane().setLayout(layout);

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1.setLayout(jPanel1Layout);

        pnlTab.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlTab.setMinimumSize(new java.awt.Dimension(800, 74));
        pnlTab.setPreferredSize(new java.awt.Dimension(800, 413));

        tabDetallado.setLayout(new java.awt.BorderLayout());

        pnlOpciones.setPreferredSize(new java.awt.Dimension(1215, 23));
        pnlOpciones.setLayout(new java.awt.GridLayout(1, 0));

        btnImprimir1.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        btnImprimir1.setText("Imprimir");
        btnImprimir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimir1ActionPerformed(evt);
            }
        });
        pnlOpciones.add(btnImprimir1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Elegir formato:");
        pnlOpciones.add(jLabel3);

        cmbFormatos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmbFormatos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Excel (*.xls)", "Texto (*.txt)" }));
        pnlOpciones.add(cmbFormatos);

        btnExportar.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarjButton5ActionPerformed(evt);
            }
        });
        pnlOpciones.add(btnExportar);

        tabDetallado.add(pnlOpciones, java.awt.BorderLayout.PAGE_END);

        tblReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblReporte.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        tblReporte.setHorizontalScrollEnabled(true);
        jScrollPane4.setViewportView(tblReporte);

        tabDetallado.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        pnlTab.addTab("Detallado", tabDetallado);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.2;
        jPanel1.add(pnlTab, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Seleccionar inventario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        btnInventarioDelete.setIcon(new javax.swing.ImageIcon("img/iconos/clear.png"));
        btnInventarioDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInventarioDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(btnInventarioDelete, gridBagConstraints);

        btnInventarioAdd.setIcon(new javax.swing.ImageIcon("img/iconos/Search.png"));
        btnInventarioAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInventarioAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(btnInventarioAdd, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.4;
        jPanel2.add(txtInventario, gridBagConstraints);

        jLabel1.setText("Inventario");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel2, gridBagConstraints);

        pnlFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Seleccionar filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        pnlFiltro.setLayout(new java.awt.GridBagLayout());

        spnTodo.setText("Todo");
        spnTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spnTodoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlFiltro.add(spnTodo, gridBagConstraints);

        btnAmbiente.setText("Por ambiente");
        btnAmbiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmbienteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        pnlFiltro.add(btnAmbiente, gridBagConstraints);

        btnAmbienteAdd.setIcon(new javax.swing.ImageIcon("img/iconos/Search.png"));
        btnAmbienteAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmbienteAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        pnlFiltro.add(btnAmbienteAdd, gridBagConstraints);

        btnAmbienteDelete.setIcon(new javax.swing.ImageIcon("img/iconos/clear.png"));
        btnAmbienteDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmbienteDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        pnlFiltro.add(btnAmbienteDelete, gridBagConstraints);

        ambienteField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ambienteFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        pnlFiltro.add(ambienteField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(pnlFiltro, gridBagConstraints);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        jPanel1.add(btnBuscar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 9, 0);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInventarioAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInventarioAddActionPerformed
        // TODO add your handling code here:
        DlgInventarioSeleccion inventarioDialog = new DlgInventarioSeleccion(this);

        Inventario inventarioFloat = inventarioDialog.getInventario();

        if (inventarioFloat != null) {
            this.inventario = inventarioFloat;
            txtInventario.setText(this.inventario.getNombre());

            FormularioUtil.activarComponente(pnlFiltro, true);
            activarControles();
        }
    }//GEN-LAST:event_btnInventarioAddActionPerformed

    private void btnInventarioDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInventarioDeleteActionPerformed
        // TODO add your handling code here:
        txtInventario.setText(null);
        inventario = null;
    }//GEN-LAST:event_btnInventarioDeleteActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        buscar();
        //        lista.addAll(this.empleadoControlador.buscarXNombre(txtBusqueda.getText().toUpperCase()));
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void ambienteFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ambienteFieldKeyPressed
        // TODO add your handling code here:

//        int code = evt.getKeyCode();
//        if (!(ambienteField.getText().equals("")) && code == KeyEvent.VK_ENTER) {
//            buscar();
//        }
    }//GEN-LAST:event_ambienteFieldKeyPressed

    private void btnAmbienteAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmbienteAddActionPerformed
        // TODO add your handling code here:
        DlgAmbienteBusqueda ambienteDialog = new DlgAmbienteBusqueda(this, this.inventario);

        this.ambiente = ambienteDialog.getAmbiente();

        if (this.ambiente != null) {
            ambienteField.setText(this.ambiente.getAmbiente().toString());
        }
    }//GEN-LAST:event_btnAmbienteAddActionPerformed

    private void btnAmbienteDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmbienteDeleteActionPerformed
        // TODO add your handling code here:
        ambienteField.setText(null);
        this.ambiente = null;
    }//GEN-LAST:event_btnAmbienteDeleteActionPerformed

    private void btnAmbienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmbienteActionPerformed
        // TODO add your handling code here:
        activarControles();
    }//GEN-LAST:event_btnAmbienteActionPerformed

    private void btnExportarjButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarjButton5ActionPerformed
        // TODO add your handling code here:

        if (cmbFormatos.getSelectedIndex() == 0) {
            ExportarXLS();
        } else if (cmbFormatos.getSelectedIndex() == 1) {
            ExportarTXT();
        }
    }//GEN-LAST:event_btnExportarjButton5ActionPerformed

    private void btnImprimir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimir1ActionPerformed
        // TODO add your handling code here:
        if (!this.lista.isEmpty()) {

            imprimir();
        }
    }//GEN-LAST:event_btnImprimir1ActionPerformed

    private void spnTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spnTodoActionPerformed
        // TODO add your handling code here:
        activarControles();
    }//GEN-LAST:event_spnTodoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ambienteField;
    private javax.swing.JRadioButton btnAmbiente;
    private javax.swing.JButton btnAmbienteAdd;
    private javax.swing.JButton btnAmbienteDelete;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnImprimir1;
    private javax.swing.JButton btnInventarioAdd;
    private javax.swing.JButton btnInventarioDelete;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbFormatos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel pnlFiltro;
    private javax.swing.JPanel pnlOpciones;
    private javax.swing.JTabbedPane pnlTab;
    private javax.swing.JRadioButton spnTodo;
    private javax.swing.JPanel tabDetallado;
    private org.jdesktop.swingx.JXTable tblReporte;
    private javax.swing.JTextField txtInventario;
    // End of variables declaration//GEN-END:variables

    private void listar() {
//        lista = this.dmc.buscarTodos();
        lista = new ArrayList();
        lista = ObservableCollections.observableList(lista);

        MTReporteInventario mt = new MTReporteInventario(lista);
        tblReporte.setModel(mt);

        actualizarTabla();
    }

    private void actualizarTabla() {
        tblReporte.packAll();
    }

    private void buscar() {

        lista.clear();
//        if (btnInventario.isSelected()) {
//            lista.addAll(this.bic.buscarXInventario(this.inventario));
//            tblReporte.packAll();
//        } else 
        if (btnAmbiente.isSelected()) {
            lista.addAll(this.bic.buscarXInventarioAmbiente(this.ambiente));
            tblReporte.packAll();
        }

    }

    private void activarControles() {

        FormularioUtil.activarComponente(ambienteField, btnAmbiente.isSelected());
        FormularioUtil.activarComponente(btnAmbienteAdd, btnAmbiente.isSelected());
        FormularioUtil.activarComponente(btnAmbienteDelete, btnAmbiente.isSelected());

//        FormularioUtil.activarComponente(btnInventarioAdd, spnTodo.isSelected());
//        FormularioUtil.activarComponente(btnInventarioDelete, spnTodo.isSelected());
//        FormularioUtil.activarComponente(txtInventario, spnTodo.isSelected());

    }

    private void ExportarTXT() {
        if (this.tblReporte.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay datos en la tabla para exportar.", "TXT",
                    JOptionPane.INFORMATION_MESSAGE);
            this.btnExportar.grabFocus();
            return;
        }
        JFileChooser chooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de texto", "txt");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Guardar archivo");
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            List<JTable> tb = new ArrayList<>();
            List<String> nom = new ArrayList<>();
            tb.add(tblReporte);
            nom.add("Reporte de inventarios");
            String texto = chooser.getSelectedFile().toString().concat(".txt");
            try {
                ExportadorTXT e = new ExportadorTXT(new File(texto), tb, nom, this.inventario.getFecha_inicio(), this.inventario.getFecha_fin(), false);
                if (e.exportarTXT()) {
                    JOptionPane.showMessageDialog(null, "Los datos fueron exportados a texto.", "TXT",
                            JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Hubo un error" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void ExportarXLS() {
        if (this.tblReporte.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay datos en la tabla para exportar.", "XLS",
                    JOptionPane.INFORMATION_MESSAGE);
            this.btnExportar.grabFocus();
            return;
        }
        JFileChooser chooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de excel", "xls");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Guardar archivo");
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            List<JTable> tb = new ArrayList<>();
            List<String> nom = new ArrayList<>();
            tb.add(tblReporte);
            nom.add("Reporte de inventarios");
            String excel = chooser.getSelectedFile().toString().concat(".xls");
            try {
                Exportador e = new Exportador(new File(excel), tb, nom, this.inventario.getFecha_inicio(), this.inventario.getFecha_fin(), false);
                if (e.exportar()) {
                    JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel.", "BCO",
                            JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Hubo un error" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void imprimir() {
        Map<String, Object> parametros = this.obtenerParametros();
        Component report = reporteador.obtenerReporte(this.lista, archivo, parametros);
        agregarPestaña("Vista previa", report);
        pnlTab.setSelectedIndex(pnlTab.getTabCount() - 1);
    }

    private void agregarPestaña(String titulo, Component ventana) {
        int index = pnlTab.indexOfComponent(ventana);
        if (index >= 0) {
            pnlTab.setSelectedIndex(index);
        } else {
            ButtonTabComponent tab = new ButtonTabComponent(pnlTab);
            pnlTab.add(titulo, ventana);
            pnlTab.setTabComponentAt(pnlTab.getTabCount() - 1, tab);
            pnlTab.setSelectedIndex(pnlTab.getTabCount() - 1);
        }
    }

    private Map<String, Object> obtenerParametros() {
//        DlgAsistenciaOpcion opcionesAdicionales = new DlgAsistenciaOpcion(this, true);
//        Map<Integer, Boolean> mapOpcionesAd = opcionesAdicionales.obtenerOpciones();
//        Calendar cal = Calendar.getInstance();

        String usuario = UsuarioActivo.getUsuario().getLogin();

//        Date[] fechas = this.obtenerFechasLimite();
        Map<String, Object> parametros = new HashMap<>();
        parametros.put("usuario", usuario);
//        parametros.put("ver_inconsistencias_como_falta", mapOpcionesAd.get(1));
//        parametros.put("ver_horas_extra", mapOpcionesAd.get(2));
        parametros.put("fecha_inicio", this.inventario.getFecha_inicio());
        parametros.put("fecha_fin", this.inventario.getFecha_fin());
        parametros.put("reporte_ruc", Main.REPORTE_RUC);
        parametros.put("reporte_logo", Main.REPORTE_LOGO);
        parametros.put("reporte_institucion", Main.REPORTE_INSTITUCION);
        parametros.put("reporte_usuario", UsuarioActivo.getUsuario().getLogin());
        parametros.put("reporte_total_bienes", lista.size() + "");
//        parametros.put("rangoValor", String.format("%s - %s", HerramientaGeneral.formatoFecha.format(fechas[0]), HerramientaGeneral.formatoFecha.format(fechas[1])));
//        parametros.put("mostrar_he", chkHFH.isSelected());

        return parametros;
    }

}
