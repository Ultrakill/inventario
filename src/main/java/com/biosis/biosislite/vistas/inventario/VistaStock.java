/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biosis.biosislite.vistas.inventario;

import com.biosis.biosislite.controladores.inventario.BienInventarioControlador;
import com.biosis.biosislite.controladores.inventario.MovimientoControlador;
import com.biosis.biosislite.entidades.escalafon.Empleado;
import com.biosis.biosislite.entidades.inventario.Bien_Inventario;
import com.biosis.biosislite.entidades.inventario.Inventario;
import com.biosis.biosislite.entidades.inventario.Movimiento;
import com.biosis.biosislite.utiles.Exportador;
import com.biosis.biosislite.utiles.ExportadorTXT;
import com.biosis.biosislite.vistas.dialogos.inventario.DlgInventarioSeleccion;
import com.biosis.biosislite.vistas.modelos.MTStock;
import com.biosis.biosislite.vistas.modelos.MTTraza;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author Documentos
 */
public class VistaStock extends javax.swing.JInternalFrame {

    /**
     * Creates new form VistaVerMovimientos
     */
    private MovimientoControlador dmc;
    private Empleado empleado;
    private List<Bien_Inventario> lista;
    private BienInventarioControlador bic = new BienInventarioControlador();
    private Inventario inventario;

    public VistaStock() {
        this.dmc = new MovimientoControlador();
        initComponents();
        listar();

        FormularioUtil.activarComponente(txtBuscar, false);
        FormularioUtil.activarComponente(btnBuscar, false);
        FormularioUtil.activarComponente(chckStockMaximo, false);
        FormularioUtil.activarComponente(chckStockMinimo, false);

    }

    private static VistaStock instancia;

    public static VistaStock getInstancia() {
        if (instancia == null) {
            instancia = new VistaStock();
        }
        return instancia;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtInventario = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStock = new org.jdesktop.swingx.JXTable();
        chckStockMaximo = new javax.swing.JCheckBox();
        chckStockMinimo = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cmbFormatos = new javax.swing.JComboBox();
        btnExportar = new javax.swing.JButton();

        setClosable(true);
        setTitle("Reporte de stock");
        setMaximumSize(new java.awt.Dimension(0, 0));
        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(new java.awt.Dimension(500, 500));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0};
        layout.rowHeights = new int[] {0};
        getContentPane().setLayout(layout);

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1.setLayout(jPanel1Layout);

        jLabel6.setText("Seleccionar Inventario:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(txtInventario, gridBagConstraints);

        jButton6.setIcon(new javax.swing.ImageIcon("img/iconos/Search.png"));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jButton6, gridBagConstraints);

        jButton7.setIcon(new javax.swing.ImageIcon("img/iconos/clear.png"));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jButton7, gridBagConstraints);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(btnBuscar, gridBagConstraints);

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuscarKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(txtBuscar, gridBagConstraints);

        jLabel1.setText("Buscar bien/producto:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel1, gridBagConstraints);

        tblStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblStockMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblStock);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        chckStockMaximo.setText("Mostrar bienes con alerta de stock máximo");
        chckStockMaximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckStockMaximoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(chckStockMaximo, gridBagConstraints);

        chckStockMinimo.setText("Mostrar bienes con alerta de stock mínimo");
        chckStockMinimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckStockMinimoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(chckStockMinimo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Elegir formato:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(jLabel3, gridBagConstraints);

        cmbFormatos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmbFormatos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Excel (*.xls)", "Texto (*.txt)" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel2.add(cmbFormatos, gridBagConstraints);

        btnExportar.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarjButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel2.add(btnExportar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        DlgInventarioSeleccion inventarioDialog = new DlgInventarioSeleccion(this);

        Inventario inventarioFloat = inventarioDialog.getInventario();

        if (inventarioFloat != null) {
            inventario = inventarioFloat;
            txtInventario.setText(inventario.getNombre());

            FormularioUtil.activarComponente(txtBuscar, true);
            FormularioUtil.activarComponente(btnBuscar, true);
            FormularioUtil.activarComponente(chckStockMaximo, true);
            FormularioUtil.activarComponente(chckStockMinimo, true);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        txtInventario.setText(null);
        inventario = null;
    }//GEN-LAST:event_jButton7ActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        buscar();
        //        lista.addAll(this.empleadoControlador.buscarXNombre(txtBusqueda.getText().toUpperCase()));
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyPressed
        // TODO add your handling code here:

        int code = evt.getKeyCode();
        if (!(txtBuscar.getText().equals("")) && code == KeyEvent.VK_ENTER) {
            buscar();
        }
    }//GEN-LAST:event_txtBuscarKeyPressed

    private void tblStockMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStockMouseReleased
        // TODO add your handling code here:
        //        int fila = tblBien.getSelectedRow();
        //        if (fila != -1) {
        //            Vacacion vacacion = listado.get(fila);
        //
        //            mostrar(vacacion);
        //        }
    }//GEN-LAST:event_tblStockMouseReleased

    private void chckStockMaximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckStockMaximoActionPerformed
        // TODO add your handling code here:
        if (chckStockMaximo.isSelected()) {
            
            chckStockMinimo.setSelected(false);
            
            lista.clear();
            this.mostrarStockMaximo();
            tblStock.packAll();
        } else {
            lista.clear();
            tblStock.packAll();
        }
        
    }//GEN-LAST:event_chckStockMaximoActionPerformed

    private void chckStockMinimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckStockMinimoActionPerformed
        // TODO add your handling code here:
        
        if (chckStockMinimo.isSelected()) {
            
            chckStockMaximo.setSelected(false);
            
            lista.clear();
            this.mostrarStockMinimo();
            tblStock.packAll();
        } else {
            lista.clear();
            tblStock.packAll();
        }
    }//GEN-LAST:event_chckStockMinimoActionPerformed

    private void btnExportarjButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarjButton5ActionPerformed
        // TODO add your handling code here:

        if(cmbFormatos.getSelectedIndex()==0){
            ExportarXLS();
        }else if(cmbFormatos.getSelectedIndex()==1){
            ExportarTXT();
        }
    }//GEN-LAST:event_btnExportarjButton5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JCheckBox chckStockMaximo;
    private javax.swing.JCheckBox chckStockMinimo;
    private javax.swing.JComboBox cmbFormatos;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTable tblStock;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtInventario;
    // End of variables declaration//GEN-END:variables

    private void listar() {
//        lista = this.dmc.buscarTodos();
        lista = new ArrayList();
        lista = ObservableCollections.observableList(lista);

        MTStock mt = new MTStock(lista);
//        MTEmpleado mtIntegrantes = new MTEmpleado(integrantes, columnasIntegrantes);
        tblStock.setModel(mt);

        actualizarTabla();
    }
//
//    private void agregar() {
//
//        List<Bien_Inventario> listaB = this.bic.buscarXSerie(txtBuscar.getText().toUpperCase(), inventario);
//
//        this.txtBuscar.setText(null);
//        this.txtBuscar.requestFocusInWindow();
//
//        if (listaB.isEmpty()) {
//            JOptionPane.showMessageDialog(null, "No se encontró el elemento", "Mensaje del Sistema", JOptionPane.ERROR_MESSAGE);
//        } else {
//            this.lblInventario.setText(listaB.get(0).getInventario().getNombre());
//            this.lblCodigo.setText(listaB.get(0).getBien().getClase().getCodigo() + listaB.get(0).getSerie());
//            bic.setSeleccionado(listaB.get(0));
//            System.out.println("TAMAÑO: " + listaB.size());
//            System.out.println("CODIGO BIEN-INV: " + bic.getSeleccionado().getId());
//
//            List<Movimiento> movimientos = dmc.buscarXBien(bic.getSeleccionado());
//
//            if (movimientos != null) {
//                lista.clear();
//                System.out.println("ENTRO EN BUSQUEDA");
//                for (Movimiento mov : movimientos) {
//
//                    lista.add(mov);
//                }
//
//                actualizarTabla();
//            }
//
//        }
//
//    }

    private void actualizarTabla() {
//        empleadoBusqueda = null;
//        FormularioUtil.limpiarComponente(txtEmpleado);
//        paginaActual = 1;
//        agregar();
//        actualizarControlesNavegacion();
        tblStock.packAll();
    }

    private void mostrarStockMinimo() {

        for (Bien_Inventario bienesStock : bic.buscarXInventario(inventario)) {
            if (bienesStock.getBien().getStockMinimo() >= bic.contarStock(bienesStock.getBien(), inventario)) {
                lista.add(bienesStock);
            }
        }

    }
    
    private void mostrarStockMaximo() {

        for (Bien_Inventario bienesStock : bic.buscarXInventario(inventario)) {
            if (bienesStock.getBien().getStockMaximo() <= bic.contarStock(bienesStock.getBien(), inventario)) {
                lista.add(bienesStock);
            }
        }

    }

    private void buscar() {

        if (this.txtBuscar.getText() != null) {
            lista.clear();
            lista.addAll(
                    this.bic.buscarXSerie(this.txtBuscar.getText(), inventario));
            if (lista.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontró el elemento", "Mensaje del Sistema", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe ingresar un codigo serie/fabrica", "Mensaje del Sistema", JOptionPane.ERROR_MESSAGE);
        }

    }
    
    private void ExportarTXT(){
        if (this.tblStock.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay datos en la tabla para exportar.", "TXT",
                    JOptionPane.INFORMATION_MESSAGE);
            this.btnExportar.grabFocus();
            return;
        }
        JFileChooser chooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de texto", "txt");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Guardar archivo");
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            List<JTable> tb = new ArrayList<>();
            List<String> nom = new ArrayList<>();
            tb.add(tblStock);
            nom.add("Reporte de stock");
            String texto = chooser.getSelectedFile().toString().concat(".txt");
            try {
                ExportadorTXT e = new ExportadorTXT(new File(texto), tb, nom, this.inventario.getFecha_inicio(), this.inventario.getFecha_fin(), false);
                if (e.exportarTXT()) {
                    JOptionPane.showMessageDialog(null, "Los datos fueron exportados a texto.", "TXT",
                            JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Hubo un error" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void ExportarXLS(){
        if (this.tblStock.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay datos en la tabla para exportar.", "XLS",
                    JOptionPane.INFORMATION_MESSAGE);
            this.btnExportar.grabFocus();
            return;
        }
        JFileChooser chooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de excel", "xls");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Guardar archivo");
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            List<JTable> tb = new ArrayList<>();
            List<String> nom = new ArrayList<>();
            tb.add(tblStock);
            nom.add("Reporte de stock");
            String excel = chooser.getSelectedFile().toString().concat(".xls");
            try {
                Exportador e = new Exportador(new File(excel), tb, nom, this.inventario.getFecha_inicio(), this.inventario.getFecha_fin(), false);
                if (e.exportar()) {
                    JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel.", "BCO",
                            JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Hubo un error" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

}
